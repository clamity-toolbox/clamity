#!/usr/bin/env bash

# desc: OS configuration management

source $CLAMITY_ROOT/lib/_.sh || exit 1

function command_man_page {
	echo "ABSTRACT

	The OS command is for configuring and managing your local host's
	operating system.

USAGE

	sub-cmd-a [--opt-a | --opt-name <name> ]

COMMAND OPTIONS

	--opt-a
		boolean yes or no

	--opt-name <name>
		the name of the thing you specifed using --opt-name.

`parse_common_options_help`

EXAMPLES
"
	return 0
}

function check_os {
	for cmd in brew port python3 pip3 aws
	do
		_echo -n "$cmd: "
		`which $cmd >/dev/null 2>&1` || { _echo "not found" && continue; }
		case $cmd in
			python3|pip3)
				echo "`$cmd --version` [`which $cmd`]"
				;;
			aws|brew|aws)
				$cmd --version;;
			port)
				$cmd version;;
			*)
				echo found;;
		esac
	done
	return 0
}

function power_mgmt_usage {
	_echo "
	clamity os pm [<attribute> [<value>]]

	attributes:
		disksleep - set disk sleep timer in all power modes to <value> minutes
		show - show all PM settings
"
}

function power_mgmt {
	[ "`_os`" != macos ] && echo "power management only supported for macos" && return 1
	[ -z "$1" ] && power_mgmt_usage && return 1
	local rc=0
	case "$1" in
		disksleep)
			[ -z "$2" ] && pmset -g|grep disksleep || _sudo pmset -a disksleep $2; rc=$?
			return $rc;;
		show)
			pmset -g; return $?;;
		*)
			_error "unknown attribute ($1)." && power_mgmt_usage && return 1;;
	esac
}

# describe sub-commands implemented here (not in external scripts)
customCmdDesc="
\n\tcheck - probe OS for config & environment info
\n\tpm - power management
"

# Handle usage and command man page
cmd=`basename $0`
subcmd="$1"
_usage "$cmd" "$subcmd" "$customCmdDesc" || exit 1
[ -n "$subcmd" ] && shift

# Simple shell options parser - includes common options
# ---------------------------
# Options are export env vars prefixed with CLAMITY_. eg.
#   CLAMITY_verbose="1"
#   CLAMITY_optWithValue="sub-value"
setup_clamity_options_parser
	# optVarName    --opt-name    "<value-if-set>"  "<default>" \
	# boolOpttName  --opt2-name   1                 0 \
	# optWithValue  --val-opt     :                 ""       # : expects 1 arg
parse_clamity_options "$@"
eval set -- $PARGS_POSITIONAL     # accomodates '--' for positional args
# "$@" now represents positional args. CLAMITY_* vars set (and exported)

case "$subcmd" in
	check) check_os "$@" || exit 1;;
	pm) power_mgmt "$@" || exit 1;;
	*) _run_clamity_subcmd "$cmd" "$subcmd" "$@" || _usage "$cmd" "" "$customCmdDesc" ||exit 1;;
esac
exit 0
