#!/usr/bin/env bash

# desc: abstracted package management

# usage: clamity os pkg {pkg-command} [ --opt-a | --opt-name <name> ]

source $CLAMITY_ROOT/lib/_.sh || exit 1

# ------------------------------------------------
__Abstract="
	The 'clamity os pkg' module is an abstraction for OS package
	management. Clamity needs to know which system package manager
	you want to use. It will take a guess or you can configure it.
	For linux distros, it uses the native package manager (yum, apt,
	etc..). MacOS works with macports or homebrew.

	The goal is to provide a consistent interface to install and
	configure known packages across OS types. Some packages are
	abstracted to represent groups of packages or a custom
	installation and configuration.
"

__Usage="
	clamity os pkg abstracted | selfupdate | which
	clamity os pkg install <pkg> [...]
	clamity os pkg installed [--ask-to-install] <pkg> [<pkg> ...]
"

__CommandOptions="
	--ask-to-install
		If a particular command/pkg is not found and a preferred package
		manager has been set, you will be interactively prompted to install
		it.
"

__EnvironmentVariables="
	CLAMITY_os_preferred_pkg_mgr
		Supported package managers: brew | port | yum | apt
"

__Examples="
	True if the readline package is installed or command found in the search path.
		clamity os pkg installed readline
"

# If you define sub-commands in this script or external to the $cmd.d/ dir, add
# them to 'customCmdDesc'. Note how each command is on its own line prefixed
# with '\n\t'.

# customCmdDesc=""
customCmdDesc="
\n\tspecial - list abstracted packages & custom installations
\n\tinstall - install packages
\n\tinstalled - check to see if a package is installed
\n\tselfupdate - update package manager and packages
\n\twhich - show the current package manager
"
# ------------------------------------------------

function get_pkg_mgr {
	[ "$CLAMITY_os_preferred_pkg_mgr" == brew ] && which brew >/dev/null 2>&1 && echo brew && return
	[ "$CLAMITY_os_preferred_pkg_mgr" == brew ] && _warn "your preferred pkg mgr is homebrew but 'brew' isn't in your search path" && return
	[ "$CLAMITY_os_preferred_pkg_mgr" == port ] && which port >/dev/null 2>&1 && echo port && return
	[ "$CLAMITY_os_preferred_pkg_mgr" == port ] && _warn "your preferred pkg mgr is macports but 'port' isn't in your search path" && return
	[ -n "$CLAMITY_os_preferred_pkg_mgr" ] && _warn "an unsupported package manager has been set ($CLAMITY_os_preferred_pkg_mgr)"
}

function set_pkg_mgr_to {
	_run $CLAMITY_ROOT/bin/run-clamity config set default os_preferred_pkg_mgr $1
	export CLAMITY_os_preferred_pkg_mgr=$1
}

function select_macos_pkg_mgr {
	which port >/dev/null 2>&1 && local macports=1 || local macports=0
	which brew >/dev/null 2>&1 && local homebrew=1 || local homebrew=0
	[ $macports -eq 0 -a $homebrew -eq 0 ] && echo "Neither homebrew nor macports detected" && return 1
	[ $(expr $macports + $homebrew) -gt 1 ] && echo "several package managers detected"
	[ $macports -eq 1 ] && _ask "Do you want macports as your default pkg manager (y/N)? " && set_pkg_mgr_to port && return 0
	[ $homebrew -eq 1 ] && _ask "Do you want homebrew as your default pkg manager (y/N)? " && set_pkg_mgr_to brew && return 0
	return 1
}

function confirm_pkg_mgr {
	if [ -z "$(get_pkg_mgr)" ]; then
		_warn "no preferred package manager selected"
		select_macos_pkg_mgr
		[ -z "$(get_pkg_mgr)" ] && return 1
	fi
	return 0
}

# # return the preferred package manager to use (offer to select if need be)
# function pkg_mgr {
# 	[ -n "$CLAMITY_os_preferred_pkg_mgr" ] && echo $CLAMITY_os_preferred_pkg_mgr && return
# 	local os=`_os`
# 	case "$os" in
# 		al2)
# 			set_pkg_mgr_to yum
# 			;;
# 		macos)
# 			select_macos_pkg_mgr
# 			;;
# 		*)
# 			# _error "OS '$os' not supported by pkg manager" && return 1
# 			return 1
# 			;;
# 	esac
# 	[ -z "$CLAMITY_os_preferred_pkg_mgr" ] && return 1
# 	# [ -n "$CLAMITY_os_preferred_pkg_mgr" ] && { echo $CLAMITY_os_preferred_pkg_mgr | grep -q '^(brew|port|yum|apt)$' || { _error "pkg manager $CLAMITY_os_preferred_pkg_mgr is not suppoered"; return 1; }}
# 	echo $CLAMITY_os_preferred_pkg_mgr
# }

# ---------- ABSTRACTED PACKAGES
# pkg | min version | src {python|os} | brief desc

# AbstractedPackages="
# aws|2|python|aws cli utility
# python3|3.10|os|python3 interpreter used to create virtual env
# "

# _ABSTRACTED_PKGS="awscli|awscliv2|docker|iptables|mail|mariadb|mysql|nginx|parallel|powershell|python|newrelic|vscode"

_ABSTRACTED_PKGS="aws"

function list_special {
	echo "
aws             AWS CLI v2 (macos) [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html]
supabase-cli    (requires honmebrew) [https://supabase.com/docs/guides/local-development/cli/getting-started]
"
	# docker        docker server
	# iptables      iptables port redirection service (v4 only)
	# mail          postfix email server
	# mariadb       MariaDB
	# mysql         MySQL
	# newrelic      New Relic infrastructure agent
	# nginx         nginx
	# parallel      parallel command execution
	# powershell    microsoft powershell (pwsh) for linux
	# vscode        visual studio code
	return 0
}

function is_abstracted_pkg {
	local pkg=$1
	echo ,$pkg, | egrep -qe ",($_ABSTRACTED_PKGS),"
}

function install_abstracted_pkg {
	local pkg="$1"
	case "$pkg" in
	aws)
		[ "$(_os)" != macos ] && _error "$(_os) not supported for this command." && return 1
		_run curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "/tmp/AWSCLIV2.pkg"
		_run sudo installer -pkg /tmp/AWSCLIV2.pkg -target /
		;;
	*)
		_warn "unknown abstracted package: $pkg"
		return 1
		;;
	esac
	return 0
}

# compare numeric versions using pure shell (blech)
# strings:   { <num>[.<num>[.<num>[...]]] }
# returns
#   1   $1 > $2
#   2   $2 < $1
#   0   otherwise
# function compare_software_version {
# 	_debug "compare_software_version $1 $2"
# 	[[ $1 == $2 ]] && return 0
# 	local IFS=.
# 	local i ver1=($1) ver2=($2)
# 	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
# 	do
# 		ver1[i]=0	# fill empty fields in ver1 with zeros
# 	done
# 	for ((i=0; i<${#ver1[@]}; i++))
# 	do
# 		[[ -z ${ver2[i]} ]] && ver2[i]=0	# pad empty fields in ver2 with zeros
# 		((10#${ver1[i]} > 10#${ver2[i]})) && return 1
# 		((10#${ver1[i]} < 10#${ver2[i]})) && return 2
# 	done
# 	return 0
# }

# function cmd_version {
# 	case "$1" in
# 		python3|brew) $cmd --version|awk '{print $2}';;
# 		aws) aws --version | awk '{print $2}' | cut -f1 -d/;;
# 		port) port version | awk '{print $2}';;
# 		*) _error "unknown command"; return 1;;
# 	esac
# }

# function check_cmd_version {
# 	local cmd="$1"
# 	local ver=`cmd_version $cmd`
# 	[ -z "$ver" ] && return 0  # command version not available. Assume ok.
# 	local minVer=`cmd_min_version $cmd`
# 	[ -z "$minVer" ] && return 0 # command min version not available. Assume ok.
# 	compare_software_version $ver $minVer; local rc=$?
# 	[ $rc -eq 2 ] && _error "command $cmd version ($ver) does not meet minimum version ($minVer)" && return 1
# 	return 0
# }

# function is_cmd_installed {
# 	local cmd rc=0
# 	for cmd in "$@"; do
# 		which $cmd >/dev/null 2>&1 && { check_cmd_version $cmd || rc=1; continue; }
# 		[ $AskToInstall -eq 1 ] && { install_pkg $cmd || rc=1; }
# 	done
# 	return $rc
# }

function install_brew_pkg {
	local pkg="$1"
	case "$pkg" in
	terraform)
		_run brew install hashicorp/tap/terraform || return 1
		;;
	supabase-cli)
		_run brew install supabase/tap/supabase || return 1
		;;
	*)
		_run brew install $cmd || return 1
		;;
	esac
	return 0
}

function install_port_pkg {
	local pkg="$1"
	case "$pkg" in
	supabase-cli | neonctl)
		_error "$pkg not available for macports" && return 1
		;;
	*)
		_run sudo port install $pkg || return 1
		if [ $(port installed | grep " ${pkg}_select " | wc -l) -eq 1 ]; then
			# for packages that utilize 'port select', select the most recent
			local whichPort=$(port select --summary | grep "^$pkg " | awk '{$1=$2=""; print $0}' | awk '{print $(NF-1)}')
			[ -n "$whichPort" ] && _run sudo port select $pkg $whichPort || return 1
		fi
		;;
	esac
	return 0
}

function install_pkg {
	local cmd="$1"
	[ -z "$cmd" ] && _error "package missing. don't know what to install." && return 1
	confirm_pkg_mgr || return 1
	_ask "Install $cmd (y/N)? " || return 1
	is_abstracted_pkg "$cmd" && {
		install_abstracted_pkg "$cmd"
		return $?
	}
	case "$CLAMITY_os_preferred_pkg_mgr" in
	port)
		install_port_pkg $cmd || return 1
		;;
	brew)
		install_brew_pkg $cmd || return 1
		;;
	*)
		_error "CLAMITY_os_preferred_pkg_mgr undefined or unknown ($CLAMITY_os_preferred_pkg_mgr)"
		return 1
		;;
	esac
	return 0
}

function is_pkg_installed {
	_trace "is_pkg_installed()> $*"
	while [ -n "$1" ]; do
		which "$1" >/dev/null 2>&1 && shift && continue
		[ $CLAMITY_AskToInstall -eq 0 ] && return 1
		install_pkg $1 || return 1
		shift
	done
	return 0
}

function update_pkg_mgr {
	confirm_pkg_mgr || return 1
	# [ -z "$CLAMITY_os_preferred_pkg_mgr" ] && _error "preferred_pkg_mgr not set" && return 1
	case "$CLAMITY_os_preferred_pkg_mgr" in
	port)
		_run sudo port selfupdate || return 1
		_run sudo port upgrade outdated || return 1
		;;
	brew)
		_run brew update || return 1
		_run brew upgrade || return 1
		;;
	*) _error "unknown package manager ($CLAMITY_os_preferred_pkg_mgr)" && return 1 ;;
	esac
}

cmd=$(_cmd_from_full_subcmd "$0")
subcmd=$(basename "$0")
_usage "$customCmdDesc" "$cmd" "$subcmd" -command || exit 1

# For sub-commands that require actions (sub-sub-commands)
action="$1" && shift

# Simple shell options parser - includes common options
# ---------------------------
# Options are export env vars prefixed with CLAMITY_. eg.
#   CLAMITY_verbose="1"
#   CLAMITY_optWithValue="sub-value"
setup_clamity_options_parser \
	AskToInstall --ask-to-install 1 0
# optVarName    --opt-name    "<value-if-set>"  "<default>" \
# boolOpttName  --opt2-name   1                 0 \
# optWithValue  --val-opt     :                 ""       # : expects 1 arg

parse_clamity_options "$@"

eval set -- $PARGS_POSITIONAL # accomodates '--' for positional args
# "$@" now represents positional args. CLAMITY_* vars set (and exported)

case "$action" in
special)
	list_special
	exit 1
	;;
install)
	install_pkg "$@"
	exit $?
	;;
installed)
	is_pkg_installed "$@"
	exit $?
	;;
selfupdate)
	update_pkg_mgr "$@"
	exit $?
	;;
which)
	get_pkg_mgr
	exit 0
	;;
*)
	[ -n "$action" ] && _error "unknown $cmd sub-command ($action)"
	_usage "$customCmdDesc" "$subcmd" "" -command
	exit 1
	;;
esac
exit 0
