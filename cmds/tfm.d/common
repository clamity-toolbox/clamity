#!/usr/bin/env bash

# desc: verify & sync tf code common to all root modules

source $CLAMITY_ROOT/lib/_.sh || exit 1

function common_usage {
	_echo "usage: clamity tfm common { report | update [mine] | new-root <state-group> <module-name> }"
}

# return 0 if files are in sync
function check_all_common_files_in_module {
	local rootModuleDir="$1"
	local state_group="$2"
	local action="$3"      # 'update' or null
	local dir_to_copy="$4" # option for 'update'

	pushd "$rootModuleDir" >/dev/null
	[ $(ls common-*.tf 2>/dev/null | wc -l) -eq 0 ] && popd >/dev/null && return 0 # no common files present
	[ -d ../../common/$state_group ] && local commonDir="$(cd ../../common/$state_group && pwd)" || local commonDir="$(cd ../../common && pwd)"
	local file filesToCopy=""

	for file in common-*.tf; do
		[ ! -f "$commonDir/$file" ] && echo "    $commonDir/$file not found (remove 'common-' from this file name)" && continue
		[ $(diff $file "$commonDir/$file" | wc -l) -eq 0 ] && echo "    $file ok" && continue
		echo "    $file differs" && filesToCopy="$filesToCopy $file"
	done

	for file in "$commonDir"/common-*.tf; do [ ! -f "$(basename $file)" ] && echo "    $(basename $file) not present"; done

	[ -z "$action" ] && popd >/dev/null && { [ -z "$filesToCopy" ] && return 0 || return 1; }
	# update
	if [ -n "$dir_to_copy" -a \( "$(pwd)" != "$dir_to_copy" \) ]; then
		echo "    ** Not updating common files in other root module ('mine' specified) **"
	else
		for file in $filesToCopy; do
			echo "    updating $file"
			cp "$commonDir/$file" . || return 1
		done
	fi
	popd >/dev/null
	return 0
}

function iterate_through_common_files {
	local action="$1" # update or empty
	[ "$2" == mine ] && local my_dir="$(pwd)" || local my_dir=""
	local state_group root_mod rc=0
	# echo "TFM_REPO_ROOT=$TFM_REPO_ROOT"
	for state_group in $(cd "$TFM_REPO_ROOT/state-groups" && ls); do
		[ ! -d "$TFM_REPO_ROOT/state-groups/$state_group" -o $state_group == common ] && continue
		echo -e "\nState Group: $state_group"
		for root_mod in $(cd "$TFM_REPO_ROOT/state-groups/$state_group" && ls); do
			[ ! -d "$TFM_REPO_ROOT/state-groups/$state_group/$root_mod" ] && continue
			echo -e "\n  Root Module: $root_mod"
			check_all_common_files_in_module "$TFM_REPO_ROOT/state-groups/$state_group/$root_mod" $state_group "$action" "$my_dir" || rc=1
		done
	done
	return $rc
}

function new_state_group {
	local stateDir="$1"
	_ask "Setup new state group $(basename $stateDir) (y/N)? " || return 1
	_run mkdir $stateDir || return 1
	local res=""
	if [ ! -f "$stateDir/config.tfbackend" ]; then
		_echo "$stateDir/config.tfbackend needs to be created."
		[ -x "$TFM_REPO_ROOT/.clamity/config/state-resource-prefix.sh" ] && eval $(cd $TFM_REPO_ROOT && ./.clamity/config/state-resource-prefix.sh) && res=$prefix && reg=$region
		while [ -z "$res" -o -z "$reg" ]; do
			_echo -n "state resource prefix (eg. pkt-5-123456788): " && read res
			_echo -n "AWS state region: " && read reg
		done
		echo -e "\nbucket = \"$res-tfstate\"\nregion = \"$reg\"\ndynamodb_table = \"$res-tflocks\"\nencrypt = true" >$stateDir/config.tfbackend
	fi
}

function new_root_module {
	local state="$1" mod="$2"
	[ -z "$mod" ] && _echo "usage: clamity tfm common new-root <state> <mod>" && return 1
	local stateDir="$TFM_REPO_ROOT/state-groups/$state"
	local rootModDir="$stateDir/$mod"
	[ -d "$rootModDir" ] && _warn "$rootModDir exists" && return 1
	[ ! -d "$stateDir" ] && { new_state_group "$stateDir" || return 1; }
	_run mkdir "$rootModDir" || return 1
	_run cp "$TFM_REPO_ROOT"/state-groups/common/common-*.tf "$rootModDir" || return 1

	local cloudProvider=aws # FIXME: this should not be hard coded

	# terraform.tf
	echo "
# This file is unique for each terraform root module. The key is a path prefix
# applied to the S3 bucket state object. It provides for maintaining multiple
# states on the same backend bucket without the need for workspaces.

terraform {
  backend \"s3\" {
    key = \"$state/$mod\"
  }
}" >$rootModDir/backend.tf || return 1

	# README.md
	local modDoc="User defined module"
	[ "$state" != users ] && modDoc="[Module document](https://github.com/teamvortexsoftware/infra-as-code/blob/$state/modules/$mod/$cloudProvider/README.md)"
	echo "# $mod root module

* $modDoc
* [State Listing](STATE.md)
* [Output Data](OUTPUT.json)
" >$rootModDir/README.md || return 1

	# output.tf
	if [ "$state" != users ]; then

		echo "
output \"props\" {
  value = {
    $mod = module.$mod.props
  }
}

output \"debug\" {
  value = {
    $mod = module.$mod.debug
  }
}" >$rootModDir/output.tf

	else

		echo "
output \"props\" {
  value = {
      $mod = length(module.$mod) > 0 ? module.$mod[0].props : null
  }
}

output \"debug\" {
  value = {
      $mod = length(module.$mod) > 0 ? module.$mod[0].debug : null
  }
}" >$rootModDir/output.tf

	fi

	# variables.tf
	echo "
variable \"custom_tags\" {
  type = map(string)
  default = {
    TerraformRoot = \"$state/$mod\"
  }
}

variable \"debug\" {
  type    = bool
  default = false
}
" >$rootModDir/variables.tf

	# main.tf
	echo "
module \"$mod\" {
  source = \"../../../infra-as-code/modules/$mod/$cloudProvider\"
  providers = {
	aws = aws.XXXX
  }

  custom_tags = var.custom_tags
  debug       = var.debug
}
" >$rootModDir/main.tf

	# dependency hooks for clamity
	echo "#!/usr/bin/env bash

# clamity dependency hook
#
# Make this file executable and clamity will run it with a '-f' flag prior to
# running a terraform plan or apply. It must return 0 for success, non-zero for
# failure.
" >$rootModDir/dependencies.sh

	echo "#!/usr/bin/env bash

# clamity dependency hook
#
# Make this file executable and clamity will run 'eval' against its output This
# is useful if you want to set environment variables prior to the terraform plan
# or apply.  Output, for example, might be 'export TF_VAR_xyz=abc'.
" >$rootModDir/dependencies.eval.sh

	touch $rootModDir/STATE.md $rootModDir/OUTPUT.json $rootModDir/AUDIT.log || return 1
}

[ -z "$1" ] && common_usage && exit 1
subcmd="$1" && shift

case "$subcmd" in
report)
	iterate_through_common_files || exit 1
	;;
update)
	[ ! -f ../../common/common-providers.tf ] && _warn "you must run this command from within a root module directory" && exit 1
	iterate_through_common_files update "$1" || exit 1
	;;
new-root)
	new_root_module "$@" || exit 1
	;;
*)
	common_usage && exit 1
	;;
esac
exit 0
