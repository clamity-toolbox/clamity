#!/usr/bin/env bash

source $CLAMITY_ROOT/lib/_.sh || exit 1

_ABSTRACTED_PKGS="awscli|awscliv2|docker|iptables|mail|mariadb|mysql|nginx|parallel|powershell|python|newrelic|vscode"

function list_abstracted {
	echo "
awscli        aws cli utility (version 1)
awscliv2      aws cli utility (version 2)
docker        docker server
iptables      iptables port redirection service (v4 only)
mail          postfix email server
mariadb       MariaDB
mysql         MySQL
newrelic      New Relic infrastructure agent
nginx         nginx
parallel      parallel command execution
powershell    microsoft powershell (pwsh) for linux
python        python >= 3.7 (as python3) and pip (as pip3)
vscode        visual studio code
"
	exit 1
}

function select_pkg_mgr {
	[ -n "$CLAMITY_package_manager" ] && _cmd_exists $CLAMITY_package_manager && _is_prop_pk package_manager "$CLAMITY_package_manager" && return 0
	case "`_os`" in
		al2023)
			_cmd_exists yum && _is_prop_ok package_manager yum && export CLAMITY_package_manager=yum
			;;
		macos)
			_cmd_exists brew && _is_prop_ok package_manager brew && export CLAMITY_package_manager=brew && return 0
			_cmd_exists port && _is_prop_ok package_manager port && export CLAMITY_package_manager=port && return 0
			;;
	esac
	[ -n "$CLAMITY_package_manager" ] && unset CLAMITY_package_manager
	_warn "no package manager available"
	return 1
}

function isAbstractedPkg {
	local pkg=$1
	echo ,$pkg, | egrep -qe ",($_ABSTRACTED_PKGS),"
}

function is_installed {
	local pkg=$1
	case "$CLAMITY_package_manager" in
		yum) rpm --quiet -q $pkg && return 0;;  # pkg is installed
		*) echo "is_installed() package manager $DT_PKG_MANAGER not supported" && exit 1;;
	esac
	return 1  # pkg is not installed
}

function initialize_pkg_mgr {
	case $DT_PKG_MANAGER in
		macports)
			which port >/dev/null 2>&1 || { echo "macports is not installed!! You need to install it first (https://www.macports.org)."; return 1; }
			echo "MacPorts $(port version 2>/dev/null) is installed."
			# dt_run sudo port -y selfupdate || return 1
			# dt_run sudo port -y upgrade outdated || return 1
			;;
		yum)
			[ "$DT_OS_DISTRO" == al2 ] && dt_run sudo amazon-linux-extras install epel -y || return 1
			;;
		*)
			echo "unknown package manager (DT_PKG_MANAGER=$DT_PKG_MANAGER)" >&2
			exit 1
			;;
	esac
	eval "`ots-srvcfg --launch-variables --vars systemPkgs`"
	[ -n "$systemPkgs" ] && dt_run dt-pkg --install $systemPkgs
	return 0
}

function abstract_pkgmgr {
	local action=$1 pkg=$2
	dt_debug "abstract_pkgmgr(action=$action, pkg=$pkg)"
	local rc=0
	if [ $action == install ]; then
		case $pkg in
			awscli) awscli_install_v1 || rc=1;;
			awsciiv2) awscli_install_v2 || rc=1;;
			mysql|mariadb) install_mysql || rc=1;;
			parallel) install_parallel || rc=1;;
			powershell) install_powershell || rc=1;;
			python) install_python || rc=1;;
			newrelic) install_newrelic || rc=1;;
			vscode) install_vscode || rc=1;;
			*) echo "installing native pkg $pkg" && install_native_packages $pkg || rc=1;;
		esac
	elif [ $action == is_installed ]; then
		case $pkg in
			*) echo "checking native pkg" && is_installed $pkg || rc=1;;
		esac
	fi
	return $rc
}

function install_native_packages {
	dt_debug "install_native_packages($1)"
	[ $ifMissing -eq 1 ] && for pkg in "$@"; do is_installed $pkg && echo "$pkg already installed" && return 1; done
	case $DT_PKG_MANAGER in
		macports)
			dt_run sudo port install "$@"
			return $?;;
		yum)
			dt_run sudo yum install $DT_Y_OPT "$@"
			return $?;;
		*)
			echo "unknown package manager (DT_PKG_MANAGER=$DT_PKG_MANAGER)" >&2
			exit 1;;
	esac
}

function auto_update {
	case "$autoUpdate" in
		status) ots-sys cron --installed system-pkg-update && echo "Auto update is on" || echo "Auto update is off";;
		on) ots-sys cron --installed system-pkg-update || { dt_run ots-sys cron --install system-pkg-update || return 1; };;
		off) ots-sys cron --installed system-pkg-update && { dt_run ots-sys cron --delete system-pkg-update || return 1; };;
	esac
	return 0
}

function update_native_packages {
	dt_echo "Updating system native package - sudo password may be required"
	case $DT_PKG_MANAGER in
		macports)
			dt_run sudo port selfupdate || { echo "selfupdate failed"; exit 1; }
			dt_run sudo port upgrade outdated || { echo "upgrade outdated failed"; exit 1; }
			;;
		yum)
			[ $withReboot -eq 1 -o $notify -eq 1 ] && { dt_info "sudo yum check-update --quiet" && [ `sudo yum check-update --quiet | wc -l` -gt 0 ] || { echo "no updates to be installed" && return 0; } }
			dt_run sudo yum $DT_Y_OPT update || { echo "yum update failed"; exit 1; }
			[ $notify -eq 1 ] && dt-notify-ops -m "packages auto-updated successfully"
			[ $withReboot -eq 1 ] && echo "rebooting" && dt_run sudo /sbin/reboot && exit 0
			;;
		*)
			echo "unknown package manager (DT_PKG_MANAGER=$DT_PKG_MANAGER)" >&2
			exit 1;;
	esac
	# update $OTS_PKG_STATUS_FILE
	echo "`date +%Y%m%d`.0" >/tmp/last-update.$$
	if [ "$DT_PKG_MANAGER" == macports ]; then
		dt_run mv /tmp/last-update.$$ $DT_CONF_DIR/`basename $OTS_PKG_STATUS_FILE` || exit 1
	else
		dt_run sudo install -o root -g root -m 644 /tmp/last-update.$$ $OTS_PKG_STATUS_FILE || exit 1
		dt_run /bin/rm -f /tmp/last-update.$$
	fi
	return 0
}

function remove_package {
	local pkg="$1"
	case $DT_PKG_MANAGER in
		macports)
			echo "code this up!"
			return 1;;
		yum)
			case "$pkg" in
				newrelic|newrelic-infra) remove_newrelic; return $?;;
				*) dt_run sudo yum remove $DT_Y_OPT $pkg; return $?;;
			esac
			;;
		*)
			echo "pkg manager $DT_PKG_MANAGER not supported"
			return 1;;
	esac
}

function install_TEMPLATE {
	case $DT_PKG_MANAGER in
		macports)
			dt_info "_PACKAGE_ via macports not yet supported"
			exit 1;;
		yum)
			[ "$DT_OS_DISTRO" != al2 ] && echo "distro $DT_OS_DISTRO not supported" && exit 1
			dt_run sudo yum install $DT_Y_OPT _PACKAGE_ || exit 1
			;;
		*)
			dt_info "package manager $DT_PKG_MANAGER not supported"
			exit 1;;
	esac
}

function install_mysql {
	case $DT_PKG_MANAGER in
		macports)
			# dt_run sudo port install mysql57 mysql57-server mysql_select || exit 1
			dt_run sudo port install mariadb-10.5 mariadb-10.5-server || exit 1
			dt_run sudo port "select" --set mysql mariadb-10.5 || exit 1
			dt_run sudo -u _mysql mysql_install_db || exit 1
			# dt_run sudo port unload mariadb-10.5-server
			echo "
The server is up. Network connections are disabled by default (only unix
sockets are allowed) so consider editing the config:

/opt/local/etc/mariadb-10.5/macports-default.cnf

by commenting out the 'skip-networking' line and restarting the server.
"
			;;
		yum)
			[ "$DT_OS_DISTRO" != al2 ] && echo "distro $DT_OS_DISTRO not supported" && exit 1
			dt_run sudo amazon-linux-extras install $DT_Y_OPT mariadb10.5 || exit 1
			;;
		*)
			dt_info "package manager $DT_PKG_MANAGER not supported"
			exit 1;;
	esac
}

function install_vscode {
	case $DT_PKG_MANAGER in
		macports)
			dt_info "VSCode via macports not yet supported"
			exit 1;;
		yum)
			[ "$DT_OS_DISTRO" != al2 ] && echo "distro $DT_OS_DISTRO not supported" && exit 1
			# https://linuxize.com/post/how-to-install-visual-studio-code-on-centos-7/
			dt_run sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc || exit 1
			echo "[code]
name=Visual Studio Code
baseurl=https://packages.microsoft.com/yumrepos/vscode
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc" >/tmp/vscode.repo
			dt_run sudo install -o root -g root -m 644 /tmp/vscode.repo /etc/yum.repos.d/vscode.repo || { dt_error "could not add /etc/yum.repos.d/vscode.repo"; exit 1; }
			dt_run /bin/rm -f /tmp/vscode.repo
			dt_run sudo yum install $DT_Y_OPT code || exit 1
			;;
		*)
			dt_info "package manager $DT_PKG_MANAGER not supported"
			exit 1;;
	esac
}

function install_parallel {
	case $DT_PKG_MANAGER in
		macports)
			dt_run sudo port install parallel || exit 1
			;;
		yum)
			[ "$DT_OS_DISTRO" != al2 ] && echo "distro $DT_OS_DISTRO not supported" && return 1
			dt_run sudo yum install $DT_Y_OPT parallel || exit 1
			;;
		*)
			dt_info "package manager $DT_PKG_MANAGER not supported"
			exit 1;;
	esac
	dt_echo "removing annoying parallel citation message..."
	echo 'will cite' | parallel --bibtex >/dev/null 2>&1 || return 1
	return 0
}

function install_powershell {
	case $DT_PKG_MANAGER in
		macports)
			dt_info 'powershell via macports not yet supported'
			return 1;;
		yum)
			[ "$DT_OS_DISTRO" != al2 ] && echo "distro $DT_OS_DISTRO not supported" && return 1
			# https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-7.1#centos-7
			dt_info 'curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo'
			curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo
			dt_run sudo yum install $DT_Y_OPT powershell || exit 1
			;;
		*)
			dt_info "package manager $DT_PKG_MANAGER not supported"
			exit 1;;
	esac
	return 0
}

function install_python {
	case $DT_PKG_MANAGER in
		macports)
			echo "don't know how to install python for macports yet" >&2
			exit 1;;
		yum)
			dt_run sudo yum install $DT_Y_OPT python3 || exit $?
			;;
		*)
			echo "unknown package manager (DT_PKG_MANAGER=$DT_PKG_MANAGER)" >&2
			exit 1;;
	esac
}

function install_newrelic {
	case $DT_OS_DISTRO in
		al2)
			if [ ! -f /etc/yum.repos.d/newrelic-infra.repo ]; then
				# openssl 1.1.x is required for forwarding system logs
				dt-pkg --is-installed openssl11 || { dt_run dt-pkg --install openssl11 || return 1; }
				dt_run sudo curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64/newrelic-infra.repo || return 1
				dt_run sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra' || return 1
			fi
			[ "$DT_PKG_MANAGER" == yum ] && { dt_run sudo yum install newrelic-infra $DT_Y_OPT || return 1; } || { echo "can't install newrelic agent for pkg manager $DT_PKG_MANAGER"; return 1; }
			;;
		*)
			echo "OS distro, $DT_OS_DISTRO, not supported"
			return 1;;
	esac
}

function remove_newrelic {
	case $DT_OS_DISTRO in
		al2)
			dt_run sudo yum remove $DT_Y_OPT newrelic-infra || return 1
			dt_run sudo /bin/rm -f /etc/yum.repos.d/newrelic-infra.repo || return 1
			dt_run sudo yum clean all || return 1
			;;
		*)
			echo "OS distro, $DT_OS_DISTRO, not supported"
			return 1;;
	esac
}

[ -z "$1" ] && usage
[ -z "$DT_PKG_MANAGER" ] && echo "DT_PKG_MANAGER not defined" >&2 && exit 1
# OTS_PKG_STATUS_FILE _must_ match ops_tools/lib/ots_env.sh
[ -n "$DT_CONF_DIR" -a -z "$OTS_PKG_STATUS_FILE" ] && OTS_PKG_STATUS_FILE="$DT_CONF_DIR/pkg.status"

source $DT_TOP/lib/awscli_install.sh || exit 1
source $DT_TOP/lib/parse_opts.sh || exit 1
#   variable-name  option-switch  arg-value  default-value
parse_defaults $(parse_default_options) \
	init           "--init"       1   0  \
	installPkgs    "--install"    :   "" \
	installFrom    "--install-from" : "" \
	removePkg      "--remove"     :   "" \
	updatePkgs     "--update"     1   0  \
	withReboot     "--with-reboot" 1  0 \
	notify         "--notify-if-successful"   1  0 \
	autoUpdate     "--auto-update" :  "" \
	installNative  "--native"     1   0  \
	listAbstracted "--list-abstracted"   1  0  \
	ifMissing      "--if-missing" 1   0 \
	isInstalled    "--is-installed" :  ""
parse_options "$@"
parse_export_defaults
eval set -- ${PARGS_POSITIONAL[@]}   # accomodates '--' for positional args
[ $detailedHelp -eq 1 ] && usage details

[ $listAbstracted -eq 1 ] && list_abstracted

if [ $init -eq 1 ]; then
	initialize_pkg_mgr || { echo "initialize_pkg_mgr failed"; exit 1; }
	[ $updatePkgs -eq 1 ] && { update_native_packages || { echo "update_native_packages failed"; exit 1; } }
	exit 0
fi

if [ -n "$isInstalled" ]; then
	isAbstractedPkg $pkg && { abstract_pkgmgr is_installed $pkg; exit $?; }
	is_installed $isInstalled
	exit $?
fi

[ -n "$removePkg" ] && { remove_package $removePkg; exit $?; }

[ -n "$autoUpdate" ] && { auto_update; exit $?; }

if [ -n "$installFrom" ]; then
	[ ! -f "$installFrom" ] && echo "file $installFrom not found" >&2 && exit 1
	installPkgs=`cat $installFrom|egrep -v -e '^$|^#'`
fi

if [ -n "$installPkgs" ]; then
	pkgList=$(echo $installPkgs|sed -e 's/,/ /g')
	if [ $installNative -eq 1 ]; then
		dt_debug "installNative=$installNative"
		install_native_packages $pkgList
		exit $?
	fi
	nativePkgList=""
	for pkg in $pkgList; do
		isAbstractedPkg $pkg && abstract_pkgmgr install $pkg || nativePkgList="$nativePkgList $pkg"
	done
	[ -z "$nativePkgList" ] && exit 0
	install_native_packages $nativePkgList
	exit $?

elif [ $updatePkgs -eq 1 ]; then
	update_native_packages
	exit $?
fi

echo "bad usage" >&2
exit 1
